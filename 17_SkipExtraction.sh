#!/bin/bash

#
# This script extracts from a set of Newick trees the according sequences of interest.
# Parameters:
#  --gene (-g)
#     The gene of interest, actually a subdirectory
#

# Get the directory where this script is
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
thisScript="$(basename "$(test -L "$0" && readlink "$0" || echo "$0")")"

# Default extension for newick tree files
# This is generated by IQ-Tree and is for consensus trees
extension="contree"

# Idiomatic parameter and option handling in sh
# Adapted from https://superuser.com/questions/186272/check-if-any-of-the-parameters-to-a-bash-script-match-a-string
# And advanced version is here https://stackoverflow.com/questions/7069682/how-to-get-arguments-with-flags-in-bash/7069755#7069755
while test $# -gt 0
do
    case "$1" in
        --gene)
            ;&
        -g)
            shift
            gene="$1"
            ;;
        -*)
            ;&
        --*)
            ;&
        *)
            echo "Bad option $1 is ignored" >&2
            ;;
    esac
    shift
done

if [ -z "$gene" ]
then
	echo "You must give a GeneName, for instance:" >&2
	echo "./$thisScript -g GeneName" >&2
	exit 1
fi

seqsPerChunk="900"

# Get the name of the sequences of interest directory and make it if it does not exist
SequencesOfInterestDir=$("$DIR/GetSequencesOfInterestDirectory.sh" -g "$gene")
mkdir -p $SequencesOfInterestDir

SequencesOfInterest="$SequencesOfInterestDir/SequencesOfInterest.fasta"

# Get the file of all the reduced set of non redundant sequences to extract the sequences of interest from
sequences="$DIR/$gene/Sequences"
nrSequenceFile90="$sequences/NonRedundantSequences90.fasta"

# Skip the extraction and just copy the sequences
cp $nrSequenceFile90 $SequencesOfInterest

# Randomly shuffle the sequences of interests and split them into chunks of
# about 900 sequences, this is not exactly set, since the actual number of sequences
# won't be devidabel by 900 without rest. However, the rest is distributed over the files.
$DIR/SplitSequencesRandomly.sh -c "$seqsPerChunk" -f "$SequencesOfInterest" -O "$SequencesOfInterestDir"

# Get statistics about the generated files
seqkit stats "$SequencesOfInterestDir/"*.fasta > "$SequencesOfInterestDir/Stats.txt"
