#!/bin/bash

#
# This script extracts from a set of Newick trees the according sequences of interest.
# Parameters:
#  --gene (-g) <GeneName>
#     The gene of interest, actually a subdirectory
#  --iteration (-i) <IterationNumber>
#     The iteration of pruning with RogueNaRok and TreeShrink
#  --aligner (-a) <AlignerName>
#     The name for the aligner used, determines the
#     input and output directory
#  --folder (-f) <inputFolderName>
#     The input folder name, for overriding the automatic generated
#     one, useful if the master files comes from another aligner
#  --extension (-e) <TreeFileExtension>
#     The extension of the Newick tree files, for instance
#     "tre", which is used by PASTA, alternatives
#     are "contree" (default) and "treefile", which are used by IQ-Tree
#  --suffix (-x) <SuffixForAlignmentDirectory>
#     The suffix use for alignment and sequence directories,
#     this allows to rerun the data processing, without having
#     to change the files for a previous run
#  --update (-u)
#     Update all tree pdf files except the master file
#     if they already exist, except the master tree files
#  --updateBig (-U)
#     Update all tree pdf files except the master file
#     if they already exist, including the master tree files
#  --ignoreIfMasterFileDoesNotExist (-X)
#     Fail gracefully if the master tree file does not exist, yet.
#     Useful in automatic processing when it is expected that
#     this file may not exist yet
#

# Get the directory where this script is
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
thisScript="$(basename "$(test -L "$0" && readlink "$0" || echo "$0")")"

# Default extension for newick tree files
# This is generated by IQ-Tree and is for final trees
# The alternative would be contree, however the python
# script for that seems needed to be adapted for this.
extension="treefile"

# Idiomatic parameter and option handling in sh
# Adapted from https://superuser.com/questions/186272/check-if-any-of-the-parameters-to-a-bash-script-match-a-string
# And advanced version is here https://stackoverflow.com/questions/7069682/how-to-get-arguments-with-flags-in-bash/7069755#7069755
while test $# -gt 0
do
    case "$1" in
        --gene)
            ;&
        -g)
            shift
            gene="$1"
            ;;
        --iteration)
            ;&
        -i)
            shift
            iteration="-i $1"
            ;;
        --baseIteration)
            ;&
        -I)
            shift
            baseIteration="-I $1"
            ;;
        --aligner)
            ;&
        -a)
            shift
            aligner="-a $1"
            ;;
        --masterAligner)
            ;&
        -A)
            shift
            masterAligner="-A $1"
            ;;
        --folder)
            ;&
        -f)
            shift
            inputDir="-f $1"
            ;;
        --extension)
            ;&
        -e)
            shift
            extension="-e $1"
            ;;
        --suffix)
            ;&
        -x)
            shift
            suffix="-x $1"
            ;;
        --masterSuffix)
            ;&
        -X)
            shift
            masterSuffix="-X $1"
            ;;
        --update)
            ;&
        -u)
            update="--update"
            ;;
        --updateBig)
            ;&
        -U)
            updateBig="--updateBig"
            update="--update"
            ;;
        --ignoreIfMasterFileDoesNotExist)
            ;&
        -M)
            ignoreIfMasterFileDoesNotExist="--ignoreIfMasterFileDoesNotExist"
            ;;
        -*)
            ;&
        --*)
            ;&
        *)
            echo "Bad option $1 is ignored in $thisScript" >&2
            ;;
    esac
    shift
done

if [ -z "$gene" ]
then
	echo "You must give a GeneName, for instance:" >&2
	echo "./$thisScript -g GeneName" >&2
	exit 1
fi

for cladeFile in "$DIR/$gene/"*"Clades.csv"
do
	"$DIR/12_ConvertTreesToFigures.sh" -g "$gene" -c "$cladeFile" $iteration $aligner $baseIteration $masterAligner $inputDir $suffix $masterSuffix $extension $update $updateBig $ignoreIfMasterFileDoesNotExist
done
